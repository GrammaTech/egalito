variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_STRATEGY: clone
    DEBIAN_IMAGE: $DOCKER_REGISTRY/metis/egalito/egalito/debian_buster
    UBUNTU18_IMAGE: $DOCKER_REGISTRY/metis/egalito/egalito/ubuntu18
    # AARCH64_IMAGE: $DOCKER_REGISTRY/metis/egalito/egalito/aarch64
    # ARM_IMAGE: $DOCKER_REGISTRY/metis/egalito/egalito/egalito/arm
    DOCKER_DIR: ./test/docker

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

stages:
  - check-format
  - build
  - test

.reset_timestamps: &RESET_TIMESTAMPS
  - echo -e "\e[0Ksection_start:`date +%s`:set_timestamps[collapsed=true]\r\e[0KSetting modification timestamps"
  - bash .ci/reset-modification-timestamps.sh
  - echo -e "\e[0Ksection_end:`date +%s`:set_timestamps\r\e[0K"

check-format:
  stage: check-format
  image: $UBUNTU18_IMAGE
  script:
    - pre-commit install-hooks
    - pre-commit run --all-files --show-diff-on-failure
    # helper message for new committers
    - |+
      cat <<EOF
      ================================================================================
      If this stage fails, the formatting of your changes may be incorrect.
      To automatically format your files, install pre-commit:
          pip3 install pre-commit
          pre-commit install
      pre-commit will now automatically format any files before commit.
      To fix any misformatted files, run:
          pre-commit run --all-files
      And then commit any changes.
      More information regarding pre-commit can be found at https://pre-commit.com.

      NOTE FOR PROJECTS WITH C/C++ CODE:
      pre-commit will by default use the correct version of every formatting tool
      EXCEPT FOR clang-format. You need to ensure the version of clang-format you
      use is EXACTLY version 6.0.0. This is available in Ubuntu 18 by default.
      ================================================================================
      EOF

coverage: 
  stage: build
  needs: []
  artifacts:
    paths:
      - coverage/
  image: $UBUNTU18_IMAGE
  cache:
    key: "$CI_COMMIT_REF_SLUG-$CI_JOB_NAME"
    paths:
      - src/build_x86_64/*/*.*
  script:
    # Make will rebuild a file if the source is newer than the target
    # Roll back timestamps to last-modified date of each file in git
    # (Makes gitlab's cache usable)
    - *RESET_TIMESTAMPS
    - cd dep && make all && cd -
    - cd src && ENABLE_COVERAGE=1 make || ENABLE_COVERAGE=1 make -j 8 && cd -
    - make all -j 8 
    - lcov -c -i -d src/build_x86_64 -o base.info
    - cd test/script && make test ||  true && cd -
    - cd test/codegen && make test || true && cd -
    - cd test/unit && ./runner || true && cd -
    - lcov -c -d src/build_x86_64 -o test.info
    - lcov -a base.info -a test.info -o total.info
    - lcov --remove total.info "/usr/*" -o egalito.info
    - mkdir coverage
    - genhtml -o coverage egalito.info 


.build-template: &build-template
  stage: build
  needs: []
  artifacts:
    paths:
      - app/
      - src/
      - test/
      - dep/
      - runtime/
  cache:
    key: "$CI_COMMIT_REF_SLUG-$CI_JOB_NAME"
    paths:
      - src/build_x86_64/*/*.*
      - config/config.h
  # fill in the build image
  script:
    # Make will rebuild a file if the source is newer than the target
    # Roll back timestamps to last-modified date of each file in git
    # (Makes gitlab's cache usable)
    - *RESET_TIMESTAMPS
    - make -j $(nproc)
  rules:
    - when: always

build-ubuntu18:
  <<: *build-template
  image: $UBUNTU18_IMAGE

build-debian:
  <<: *build-template
  image: $DEBIAN_IMAGE

.test-template: &test-template
  variables:
    GIT_STRATEGY: none
  stage: test
  before_script: []
  script:
    - cd test/codegen && make test && cd -
#    - cd test/unit && ./runner && cd -
#    - cd test/script && make test && cd -

tests-ubuntu18:
  <<: *test-template
  needs: [build-ubuntu18]
  image: $UBUNTU18_IMAGE

tests-debian:
  <<: *test-template
  needs: [build-debian]
  image: $DEBIAN_IMAGE
